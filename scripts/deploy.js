const hre = require("hardhat");

const dateTimeLibraryRopsten = "0x947cc35992e6723de50bf704828a01fd2d5d6641";
const dateTimeLibraryGoerli = "0xe7d178e435e009ded2759fb946bdccc09d567d15";
const dateTimeLibraryEthereum = "0x23d23d8f243e57d0b924bff3a3191078af325101";

const dateTimeLibrary = dateTimeLibraryGoerli;

var currentDescriptorAddressGoerli = "";
var currentNFTAddressGoerli = "";

var currentDescriptorAddress = currentDescriptorAddressGoerli;
var currentNFTAddress = currentNFTAddressGoerli;

const verify = false

async function main() {
  const [deployer] = await ethers.getSigners();

  console.log("Deploying contracts with the account:", deployer.address);

  console.log("Account balance:", (await deployer.getBalance()).toString());

  // await mintToken(elvis)
  // return

  /* Unneeded since we don't setup an external library link yet
  if (dateTimeLibrary == "") {
    const TimeLibrary = await ethers.getContractFactory("BokkyPooBahsDateTimeLibrary");
    const timeLibrary = await TimeLibrary.deploy();
    await timeLibrary.deployed();
    console.log("Address of TimeLibrary:", timeLibrary.address);
    dateTimeLibrary = timeLibrary.address

    await delay(20000);
    await hre.run("verify:verify", {
      address: dateTimeLibrary,
      contract: "contracts/libraries/BokkyPooBahsDateTimeLibrary.sol:BokkyPooBahsDateTimeLibrary",
      constructorArguments: [
      ],
      libraries: {
      }
    });
  }
  */

  const NFTDescriptor = await ethers.getContractFactory("NFTDescriptor");
  const nftDescriptorLib = await NFTDescriptor.deploy();
  await nftDescriptorLib.deployed();

  console.log("Library address:", nftDescriptorLib.address);
  currentDescriptorAddress = nftDescriptorLib.address

  const OnchainArt = await ethers.getContractFactory("OnchainArt", {
    libraries: {
      NFTDescriptor: currentDescriptorAddress,
    },
  });
  const name = "OnchainArt";
  const symbol = "OnchainArt";
  const collectionSymbol = "OnchainArt";
  const onchainArt = await OnchainArt.deploy(
    name,
    symbol,
    collectionSymbol,
  );
  await onchainArt.deployed();

  console.log("Token address:", onchainArt.address);
  currentNFTAddress = onchainArt.address;

  if (verify) {
    // The delay is necessary to avoid "the address does not have bytecode" error
  await delay(20000);

  await hre.run("verify:verify", {
    address: currentNFTAddress,
    constructorArguments: [
      name,
      symbol,
      collectionSymbol,
    ],
    libraries: {
      NFTDescriptor: currentDescriptorAddress,
    }
  });
  }

  await mintToken(elvis, elvisScale)
  await mintToken(phone, phoneScale)
}

async function mintToken(svgPath, scale) {
  const [deployer] = await ethers.getSigners();

  console.log("Deploying contracts with the account:", deployer.address);

  console.log("Account balance:", (await deployer.getBalance()).toString());

  const OnchainArt = await ethers.getContractFactory("OnchainArt", {
    libraries: {
      NFTDescriptor: currentDescriptorAddress,
    },
  });
  const contract = await OnchainArt.attach(
    currentNFTAddress // The deployed contract address
  );

  // Now you can call functions of the contract
  const result = await contract.mint(
    deployer.address,
    // 1702785345,
    svgPath,
    scale
  );
  console.log(result);
}

const elvis = "m908.00071 532.40818c-32.64083 1.31168-62.34103 7.54123-124.15625 26.03907l-35.48828 10.61914-7.80664-1.81446c-31.23166-7.26003-58.90224.35152-80.54688 22.15821-24.77544 24.96093-37.33193 59.8309-37.90234 105.25781-.26996 21.49845-.37484 22.23027-4.57031 32.14844-9.54519 22.5649-25.09724 45.17037-54.37696 79.0332-41.44896 47.93689-58.97661 70.54545-69.22265 89.29102-3.19127 5.83853-8.95869 13.06338-15.9668 20-31.17447 30.8564-45.99695 71.93682-45.93945 127.32619.0265 25.5207 2.01091 43.1985 7.35351 65.5332 4.67246 19.533 6.8091 25.8301 12.73828 37.543 27.85055 55.0178 38.41029 108.5729 43.96875 222.996l1.48242 30.5372 7.96875 27.4628c20.19709 69.5981 39.55097 121.818 65.64454 177.1309 6.1397 13.0151 13.11574 28.1641 15.50195 33.6641 12.42235 28.6323 34.56079 69.1207 54.25586 99.2265 38.79407 59.3011 85.75529 108.2523 135.72851 141.4805 10.26665 6.8265 23.46732 14.793 29.33399 17.7031 11.77645 5.8418 36.11828 12.3499 58.27344 15.5781 7.54961 1.1 17.02526 2.8683 21.05859 3.9297 5.97717 1.5731 17.56746 1.8471 62.66797 1.4864 32.78992-.2623 59.12269-1.061 64.63479-1.961 9.8317-1.6052 40.5351-10.0026 45.8242-12.5332 1.7192-.8226 4.5668-4.3404 6.3281-7.8164 1.7614-3.4759 4.9836-9.1283 7.1602-12.5605s5.5623-11.1052 7.5254-17.0528 6.1203-16.5258 9.2382-23.5058c5.0539-11.314 10.901-29.1172 15.9747-48.6426 8.7533-33.686 11.5803-40.2977 21.9375-51.332 12.8508-13.6909 35.1675-50.1531 47.7402-78 2.9799-6.6 8.5239-21.6007 12.3203-33.334 3.7964-11.7334 7.5275-23.134 8.291-25.334 6.7113-19.3402 9.3089-28.0216 10.9629-36.6367 1.059-5.5159 4.6568-18.3369 7.9941-28.4903 3.3374-10.153 6.0684-19.4808 6.0684-20.7285 0-4.381 13.8903-43.0957 18.709-52.1445 1.3669-2.5666 4.6668-12.1653 7.332-21.332 2.6653-9.1667 6.2817-20.8667 8.0371-26s5.9669-19.234 9.3594-31.334c8.4598-30.1728 19.3265-62.6481 25.0137-74.7578 2.6067-5.5503 5.9928-14.8498 7.5254-20.666 1.5325-5.8163 5.0938-15.437 7.914-21.377 7.7403-16.3031 21.7734-67.696 22.1719-81.1992 1.7023-57.6788 2.0054-74 1.377-74-.4039 0-3.5916 1.7557-7.086 3.9023-12.3963 7.6148-34.8852 13.4383-51.6875 13.3848l-8-.0234 7.6348-4.1426c4.1989-2.2783 10.0807-6.2359 13.0703-8.7949 4.8421-4.1447 5.3364-5.108 4.5371-8.8223-.4935-2.2933-1.7563-5.8513-2.8066-7.9063-1.9751-3.8644-11.9983-14.2636-13.7481-14.2636-.5452 0-2.067 2.8154-3.3808 6.2558-3.1702 8.3008-11.4517 17.0687-18.7539 19.8574-7.091 2.7081-19.1237 2.0297-26.0039-1.4667-7.5218-3.8226-15.4648-10.9646-20.0274-18.0059-3.991-6.159-4.477-6.4926-6.625-4.5488-4.0382 3.6546-8.2495 15.2113-7.416 20.3476.8596 5.2971 6.0359 11.3203 12.8535 14.9551l4.666 2.4883-4.3769.0586c-30.4024.4094-36.9591 53.2572-18.2891 147.3926 5.1276 25.8534 11.8666 53.963 18.6016 77.5859 5.0615 17.7528 8.747 38.1151 8.7011 48.0664-.057 12.2778-7.3922 22.3095-28.6679 39.207-10.9236 8.6757-21.7747 20.2165-28.4219 30.2266l-4.707 7.0879 3.5097 10.9121c9.0006 27.9891 12.8375 49.8076 13.9121 79.1035.907 24.7265 2.2659 20.8825-15.0039 42.4766-11.7314 14.669-13.5827 18.2132-15.9336 30.5-3.6943 19.3083-10.4458 34.7206-21.1875 48.373-15.1716 19.2828-36.5192 29.9662-67.4355 33.7461-17.1712 2.0993-26.9806 1.6948-47.90039-1.9746-20.53964-3.603-35.64046-8.0973-45.83204-13.6406-5.93396-3.2276-18.30231-14.9037-18.30273-17.2793-.00011-.5814 23.25125-1.0586 51.66797-1.0586 48.21439 0 52.53879-.1941 64.73829-2.9082 28.3841-6.3148 45.381-19.5723 50.2793-39.2188 1.8886-7.5755.1224-15.2497-4.8789-21.1933-5.7645-6.8508-10.4347-8.5368-22.9571-8.293-9.8084.1911-11.8568-.1983-17.0273-3.2285-5.6911-3.335-6.8396-3.4749-36.0781-4.3848-33.19624-1.0332-94.10212.2546-117.07619 2.4746-31.96023 3.0884-84.68464.9914-80.49219-3.2011 2.35801-2.358 41.99159-11.8289 87.1582-20.8282 59.19719-11.7948 81.79632-17.2609 100.77928-24.375l12.7793-4.789 11.2207 4.5605c29.9586 12.1785 51.9209 15.0977 66.2305 8.8008 8.0575-3.5459 14.0976-9.8191 17.9219-18.6113 6.4154-14.7492-2.09-48.9484-14.1368-56.8418-2.9327-1.9216-3.652-1.9116-8.3359.1172-7.6097 3.2957-18.5691 3.1199-25.793-.4141-3.3-1.6145-10.7993-7.2127-16.666-12.4395-18.5043-16.4859-32.0507-21.3172-76.24998-27.1933-26.03682-3.4616-37.72525-6.2637-51.40429-12.3262-6.8368-3.03-8.04903-4.1937-11.33399-10.8828-3.38488-6.8925-3.67346-8.7134-3.61328-22.8242.0747-17.5118 3.17189-31.5273 10.44531-47.2695 4.42988-9.5879 11.83187-19.3965 14.63868-19.3965.84874 0 3.24582 6.7353 5.33789 15 10.62055 41.9563 26.13168 55.0436 56.57031 47.7343 14.55595-3.4955 33.64105 1.3241 84.27535 21.2813 43.795 17.2616 51.3728 19.4624 59.7637 17.3496 6.9982-1.7623 14.8118-6.9298 22.2363-14.7031 2.9333-3.0712 9.7729-8.9479 15.1993-13.0586 17.0136-12.8884 20.4428-21.9816 14.9316-39.6035-3.2576-10.4162-16.0732-70.2319-22.1035-103.1641-14.2551-77.8479-20.5667-151.0213-16.836-195.207l1.5508-18.3711 5.6289-4.9375c3.0958-2.7151 16.1296-15.1717 28.9629-27.6817 27.8189-27.1178 31.3782-30.04187 48.666-39.98629 17.1293-9.85316 76.6015-39.29643 85.4434-42.30078 8.8494-3.00693 17.828-9.9682 23.1484-17.94727 4.2585-6.38677 4.2682-6.43747 3.4239-19.07031-.4654-6.96664-1.2935-30.3667-1.8399-52l-.9922-39.33398-4.3047-12.66602c-6.7767-19.94253-18.7317-85.3631-22.7812-124.66797-3.2303-31.3532-12.2922-51.50129-32.0977-71.36914-13.05-13.09125-26.5823-20.9789-43.6171-25.42383-13.435-3.50554-36.671-3.76594-51.6504-.57812-11.9147 2.53559-12.9056 2.46599-67.3985-4.79883-64.5769-8.60923-102.8994-18.07239-136.8281-33.78906-22.17709-10.27304-50.01869-14.91145-81.83789-13.63282zm-142.48828 363.88672c2.72331.0154 5.54812.0806 8.48828.19336 23.44181.89907 35.26746 2.61308 79.33203 11.4961 33.40317 6.73378 60.3923 10.68164 73.00391 10.68164 10.413 0 14.95901 2.53159 29.43359 16.38281 16.15385 15.45819 20.59951 17.18525 31.3418 12.18359 16.00116-7.45019 29.33066-2.72325 45.07616 15.98243l7.7656 9.2246-5.9511 6.36329c-8.6803 9.27997-16.3231 21.76718-19.4414 31.76758-2.219 7.1161-2.5685 10.6724-1.8575 18.9238 1.3983 16.2261-1.753 20.0111-21.1445 25.3848-6.3067 1.7476-11.33921 4.2253-15.45508 7.6094-10.25736 8.4336-14.618 11.0489-23.875 14.3164-24.85965 8.7748-51.17304.111-85.66211-28.2032l-10.09765-8.291-1.59961 7.7403c-4.5625 22.0893-25.49539 35.8782-52.02344 34.2695-13.47702-.8172-21.40123-3.8204-29.61523-11.2266-5.84336-5.2687-10.48414-13.5332-10.53516-18.7597-.0387-3.9632-3.0015-3.8578-10.21094.3672-6.49458 3.806-11.43135 11.2581-14.64843 22.1093-4.67068 15.7542-10.82725 22.5073-20.53125 22.5176-4.16516 0-6.36911-1.6136-19.5-14.3281-11.42963-11.0672-15.3355-15.771-17.14258-20.6426-3.01742-8.1344-2.20717-16.8359 2.49219-26.7695 5.42353-11.4644 3.50849-13.857-15.08204-18.8321-6.82915-1.8276-12.74155-3.6478-13.13867-4.0449-1.71009-1.7101 6.40741-7.7592 19.75586-14.72264 7.90052-4.12148 16.907-9.67088 20.01367-12.33008 5.47641-4.68759 13.29688-14.3399 13.29688-16.4121 0-.56095-5.85001 1.37069-13 4.29296-16.27633 6.65231-39.06209 13.60626-54.49805 16.63086-17.94376 3.51601-43.88339 3.30522-55.86328-.45507-16.94588-5.31902-30.63816-17.99698-35.80078-33.14844l-2.01367-5.91211 3.70703-1.91797c7.17923-3.71252 30.62439-9.87639 78.80078-20.71484 49.0765-11.04094 70.99296-16.96378 89.33398-24.14649 13.70218-5.36605 27.78252-7.68785 46.84571-7.58008zm-617.45117 42c-1.4223-1.57339-18.00373 33.98653-23.48243 50.35938-4.1202 12.31302-5.00581 17.16792-6.06445 33.21682-.71247 10.8011-2.07866 20.7813-3.21094 23.4629-1.39681 3.3082-2.12797 11.4592-2.51367 28-.3759 16.1207-1.22665 25.8048-2.75195 31.332-2.38064 8.6265-4.46474 56.4238-2.83789 65.0957.5484 2.9233 6.57814 12.4431 16.31836 25.7695 8.49598 11.6241 20.61462 28.8823 26.93164 38.3516 12.46927 18.6917 19.73201 25.6531 34.34179 32.9102 14.2273 7.0668 28.53376 7.2572 40.00782.5332 26.54059-15.5539 41.2618-79.6096 29.7207-129.3262-1.85538-7.9927-2.71283-15.8527-2.56641-23.5352.12386-6.5021-.3617-11.8929-1.11328-12.3574-4.37264-2.7025-21.50781 35.9756-21.50781 48.5488 0 2.1189-.59894 4.2247-1.33203 4.6778-.7331.453-4.97929-1.121-9.43555-3.4961-19.48367-10.3847-36.84384-38.4504-46.49805-75.1719-5.71192-21.7265-7.11329-33.7055-7.33398-62.666l-.21484-28.00002-7.75782-23.33398c-4.2676-12.83331-8.18275-23.79975-8.69921-24.3711z"
const elvisScale = "0.15,0.15"

const phone = "M13,1a1,1,0,0,1,1-1A10.011,10.011,0,0,1,24,10a1,1,0,0,1-2,0,8.009,8.009,0,0,0-8-8A1,1,0,0,1,13,1Zm1,5a4,4,0,0,1,4,4,1,1,0,0,0,2,0,6.006,6.006,0,0,0-6-6,1,1,0,0,0,0,2Zm9.093,10.739a3.1,3.1,0,0,1,0,4.378l-.91,1.049c-8.19,7.841-28.12-12.084-20.4-20.3l1.15-1A3.081,3.081,0,0,1,7.26.906c.031.031,1.884,2.438,1.884,2.438a3.1,3.1,0,0,1-.007,4.282L7.979,9.082a12.781,12.781,0,0,0,6.931,6.945l1.465-1.165a3.1,3.1,0,0,1,4.281-.006S23.062,16.708,23.093,16.739Zm-1.376,1.454s-2.393-1.841-2.424-1.872a1.1,1.1,0,0,0-1.549,0c-.027.028-2.044,1.635-2.044,1.635a1,1,0,0,1-.979.152A15.009,15.009,0,0,1,5.9,9.3a1,1,0,0,1,.145-1S7.652,6.282,7.679,6.256a1.1,1.1,0,0,0,0-1.549c-.031-.03-1.872-2.425-1.872-2.425a1.1,1.1,0,0,0-1.51.039l-1.15,1C-2.495,10.105,14.776,26.418,20.721,20.8l.911-1.05A1.121,1.121,0,0,0,21.717,18.193Z"
const phoneScale = "10,10"

const delay = ms => new Promise(res => setTimeout(res, ms));

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
